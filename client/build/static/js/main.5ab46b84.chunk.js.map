{"version":3,"sources":["store/types.js","store/reducers/sentence.js","store/reducers/index.js","store/index.js","components/Main/index.js","store/actions/sentence.js","routes/index.js","App.js","reportWebVitals.js","index.js"],"names":["sentenceTypes","initialState","isLoading","sentences","combineReducers","sentenceReducer","state","action","type","payload","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","Nextbutton","props","Stack","direction","spacing","Button","onClick","changeSentence","variant","endIcon","Copyright","Typography","color","Link","href","Date","getFullYear","Main","loadSentences","a","loadSentence","max","length","index","Math","floor","random","sentence","setState","count","this","Box","sx","display","flexDirection","minHeight","CssBaseline","Container","component","mt","mb","maxWidth","gutterBottom","pt","py","px","backgroundColor","theme","palette","mode","grey","Component","connect","dispatch","getState","axios","get","data","console","error","JSON","stringify","Routes","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ab46b84.chunk.js","sourcesContent":["export const sentenceTypes = {\n    IS_LOADING: 'PRODUCT_IS_LOADING',\n    LOAD_SENTENCE: 'LOAD_SENTENCE'\n}\n","import {sentenceTypes} from '../types'\n\nconst initialState = {\n    isLoading: false, \n    sentences: [],\n}\n\nexport default function sentenceReducer(state = initialState, action) {\n    const {type, payload} = action;\n\n    switch(type) {\n        case sentenceTypes.IS_LOADING:\n            return{\n                ...state,\n                isLoading: payload\n            }\n        case sentenceTypes.LOAD_SENTENCE:\n            return {\n                ...state,\n                isLoading: false,\n                sentences: payload.sentences\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\n\nimport sentenceReducer from \"./sentence\";\n\nexport default combineReducers({\n  sentenceReducer,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Box from \"@mui/material/Box\";\nimport Typography from \"@mui/material/Typography\";\nimport Container from \"@mui/material/Container\";\nimport Link from \"@mui/material/Link\";\n\nimport Button from \"@mui/material/Button\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport Stack from \"@mui/material/Stack\";\n\nimport { connect } from \"react-redux\";\nimport { loadSentence } from \"../../store/actions/sentence\";\n\n// next button\nfunction Nextbutton(props) {\n  return (\n    <Stack direction=\"row\" spacing={2}>\n      <Button\n        onClick={props.changeSentence}\n        variant=\"contained\"\n        endIcon={<SendIcon />}\n      >\n        Next Sentence\n      </Button>\n    </Stack>\n  );\n}\n\n// copyright text\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\">\n      {\"Copyright Â© \"}\n      <Link color=\"inherit\" href=\"javascript:void()\">\n        Santosh Gusain\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n}\n\n// main component default exported\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    const { sentences } = props;\n    this.state = {\n      count: 0,\n      sentence:\n        \"Pin a footer to the bottom of the viewport.The footer will move as the main element of the page grows.\",\n      sentences,\n    };\n  }\n\n  componentDidMount() {\n    this.loadSentences();\n  }\n\n  // function to load sentences array\n  loadSentences = async () => {\n    await this.props.loadSentence();\n    const { sentences } = this.props.sentenceReducer;\n    const max = sentences.length,\n      min = 0,\n      index = Math.floor(Math.random() * (max - min) + min),\n      sentence = sentences[index];\n    this.setState({ ...this.state, sentences, sentence });\n  };\n\n  // For changing sentence which is shown\n  changeSentence = () => {\n    let { sentences, count } = this.state;\n    // reset count to zero if count exceeds index of the sentences\n    if (count > sentences.length - 1) {\n      count = 0;\n    }\n    // update state\n    this.setState({\n      ...this.state,\n      sentence: sentences[count],\n      count: count + 1,\n    });\n  };\n\n\n  render() {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          minHeight: \"100vh\",\n        }}\n      >\n        <CssBaseline />\n        <Container component=\"main\" sx={{ mt: 8, mb: 2 }} maxWidth=\"sm\">\n          <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n            {\"Sentence\"}\n          </Typography>\n          <Typography sx={{ mb: 4 }} variant=\"h5\" component=\"h2\" gutterBottom>\n            {this.state.sentence}\n          </Typography>\n        </Container>\n\n        <Box\n          component=\"footer\"\n          sx={{\n            pt: 3,\n            mt: \"auto\",\n          }}\n        >\n          <Container maxWidth=\"sm\" sx={{ mb: 2 }}>\n            <Nextbutton changeSentence={this.changeSentence} />\n          </Container>\n\n          <Box\n            component=\"div\"\n            sx={{\n              py: 3,\n              px: 2,\n              backgroundColor: (theme) =>\n                theme.palette.mode === \"light\"\n                  ? theme.palette.grey[200]\n                  : theme.palette.grey[800],\n            }}\n          >\n            <Container maxWidth=\"sm\">\n              <Typography variant=\"body1\">\n                Improve your sentence pronunciation here by practising it\n                everyday.\n              </Typography>\n              <Copyright />\n            </Container>\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nconst mapStateToProp = (state) => {\n  return {\n    sentenceReducer: state.sentenceReducer,\n  };\n};\nexport default connect(mapStateToProp, { loadSentence })(Main);\n","import axios from \"axios\";\nimport { sentenceTypes } from \"../types\";\n\nexport const loadSentence = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: sentenceTypes.IS_LOADING,\n      payload: true,\n    });\n\n    const sentences = (await axios.get(\"http://localhost:3001/sentence\")).data;\n    dispatch({\n      type: sentenceTypes.LOAD_SENTENCE,\n      payload: { sentences },\n    });\n  } catch (error) {\n    console.error(JSON.stringify(error));\n  }\n};\n","// import \"./App.css\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"../components/Main\";\n\nfunction Routes() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Routes from \"./routes\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}